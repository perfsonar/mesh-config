# At the top level are elements specific to the overall Mesh. This includes a
# description of the 'mesh', the admins for the mesh, the organizations
# involved in the mesh, and the tests that the meshes perform.

# A human-readable description of the overall mesh
description      DICE Mesh

# The overall mesh administrators (i.e. who one should contact if problems are
# seen with the mesh, etc).
<administrator>
  name       Aaron Brown
  email      aaron@example.internet2.edu
</administrator>

<administrator>
  name       Andy Lake
  email      andy@example.es.net
</administrator>

# Each mesh has one or more "organization" blocks. This allows encapsulating
# the administrators, sites, MAs, etc that are specific to the organization. In
# this example organization, all the data is stored on the hosts on which it is
# collected which is the norm for Toolkit instances.
<organization>
  # A human-readable description of the organization
  description    Internet2

  # The administrators for the organization (i.e. who one should contact if
  # problems are seen with individual sites/hosts in the mesh.
  <administrator>
    name    Aaron Brown
    email   aaron@example.internet2.edu
  </administrator>

  # There can be one or more 'site' blocks. Each 'site' block corresponds to a
  # logical site in the organization which may contain one or more hosts.
  # Elements in the 'site' block apply to all the 'host' blocks contained
  # within them, and inherit the properties from the 'organization'.
  <site>
    ## A human-readable description of where the site is located (e.g. a city or state)
    <location>
      city     New York
      state    NY
      # The latitude and longitude where the site is located
      latitude   40.720
      longitude  -74.005
    </location>

    # Individual sites can have specific administrators associated with them.
    <administrator>
      name       Matt Zekauskas
      email      matt@example.internet2.edu
    </administrator>

    # There can be one or more 'host' blocks. Each 'host' block corresponds to
    # a single host at a site.
    <host>
      # An optional human-readable description of the host
      description    perfSONAR Host in New York
      address        perfsonar.newy.example.internet2.edu

      # There can be one or more 'measurement_archive' blocks. These have a 'read'
      # URL which corresponds to the perfSONAR-speaking MA where test results can
      # be obtained from. The blocks also have a 'write' URL which tells tests
      # where the results can be written to. For hosts running the Performance
      # Toolkit, the following URLs will all match the measurement archives
      # running on the host, just replace the perfsonar.newy.example.internet2.edu
      # with the hosts address.
      <measurement_archive>
        type        traceroute
        read_url    http://perfsonar.newy.example.internet2.edu:8086/perfSONAR_PS/services/traceroute_ma
        write_url   http://perfsonar.newy.example.internet2.edu:8086/perfSONAR_PS/services/tracerouteCollector
      </measurement_archive>

      <measurement_archive>
        type        perfsonarbuoy/owamp
        read_url    http://perfsonar.newy.example.internet2.edu:8085/perfSONAR_PS/services/pSB
        write_url   perfsonar.newy.example.internet2.edu:8570
      </measurement_archive>

      <measurement_archive>
        type        perfsonarbuoy/bwctl
        read_url    http://perfsonar.newy.example.internet2.edu:8085/perfSONAR_PS/services/pSB
        write_url   perfsonar.newy.example.internet2.edu:8569
      </measurement_archive>

      <measurement_archive>
        type       pinger
        read_url   http://perfsonar.newy.example.internet2.edu:8075/perfSONAR_PS/services/pinger/ma
        # No 'write_url' for PingER measurement archives
      </measurement_archive>
    </host>
  </site>

  <site>
    <location>
      city       Salt Lake City
      state      UT
      latitude   40.757
      longitude  -111.953
    </location>

    <host>
      description    perfSONAR Host in Salt Lake City
      address        perfsonar.salt.example.internet2.edu

      <measurement_archive>
        type        traceroute
        read_url    http://perfsonar.salt.example.internet2.edu:8086/perfSONAR_PS/services/traceroute_ma
        write_url   http://perfsonar.salt.example.internet2.edu:8086/perfSONAR_PS/services/tracerouteCollector
      </measurement_archive>

      <measurement_archive>
        type        perfsonarbuoy/owamp
        read_url    http://perfsonar.salt.example.internet2.edu:8085/perfSONAR_PS/services/pSB
        write_url   perfsonar.salt.example.internet2.edu:8570
      </measurement_archive>

      <measurement_archive>
        type        perfsonarbuoy/bwctl
        read_url    http://perfsonar.salt.example.internet2.edu:8085/perfSONAR_PS/services/pSB
        write_url   perfsonar.salt.example.internet2.edu:8569
      </measurement_archive>

      <measurement_archive>
        type       pinger
        read_url   http://perfsonar.salt.example.internet2.edu:8075/perfSONAR_PS/services/pinger/ma
        # No 'write_url' for PingER measurement archives
      </measurement_archive>
    </host>
  </site>
</organization>

<organization>
  description    ESnet

  <administrator>
    name    Andy Lake
    email   andy@example.es.net
  </administrator>
  <administrator>
    name    Brian Tierney
    email   bltierney@example.es.net
  </administrator>

  # Instead of having each host have its own measurement archives. It is
  # possible to have a central server act as a measurement archive for all the
  # hosts in an organization. The only exception to this is 'pinger' tests
  # which, for legacy reasons, have to be on the host they are measuring.
  <measurement_archive>
    type        traceroute
    read_url    http://ps-db.example.es.net:8086/perfSONAR_PS/services/traceroute_ma
    write_url   http://ps-db.example.es.net:8086/perfSONAR_PS/services/tracerouteCollector
  </measurement_archive>

  <measurement_archive>
    type        perfsonarbuoy/owamp
    read_url    http://ps-db.example.es.net:8085/perfSONAR_PS/services/pSB
    write_url   ps-db.example.es.net:8570
  </measurement_archive>

  <measurement_archive>
    type        perfsonarbuoy/bwctl
    read_url    http://ps-db.example.es.net:8085/perfSONAR_PS/services/pSB
    write_url   ps-db.example.es.net:8569
  </measurement_archive>

  <site>
    <location>
      city    New York
      state   NY
      latitude   40.720
      longitude  -74.005
    </location>

    <host>
      address    newy-pt1.example.es.net
    </host>

    <host>
      address    newy-owamp.example.es.net
      <measurement_archive>
        type       pinger
        read_url   http://newy-owamp.example.es.net:8075/perfSONAR_PS/services/pinger/ma
        # No PingER 'write' to the MA
      </measurement_archive>
    </host>
  </site>

  <site>
    <location>
      city       Chicago
      state      IL
      latitude   41.896
      longitude  -87.643
    </location>

    <host>
      address    chic-pt1.example.es.net
    </host>
    <host>
      address    chic-owamp.example.es.net
      <measurement_archive>
        type       pinger
        read_url   http://chic-owamp.example.es.net:8075/perfSONAR_PS/services/pinger/ma
        # No PingER 'write' to the MA
      </measurement_archive>
    </host>
  </site>
</organization>

# The 'include' direction can be used to include other configurations in the
# mesh configuration. The URL listed will be embedded verbatim at the location
# of the include, merging with the configuration in the local file. Multiple
# 'include' directives may be used, though the order of how they are included
# is unspecified.
<organization>
  include      http://example.edu/example_organization.json

  # When the example_organization.json is merged in, the 'description' listed
  # here will take precendence over a 'description' field included in the
  # example_organization.json
  description  DICE View Of example.edu

  # When the example_organization.json is merged in, any top-level 'host'
  # elements (i.e. host elements directly under the organization, not under a
  # site) will be included in the list of hosts along with the host listed
  # below.
  <host>
    address      dice-tester.example.edu
  </host>

  # When the example_organization.json is merged in, if it includes a
  # 'location' entry, it will be merged with the location entry below. If the
  # elements defined in the entry below are also defined in the
  # example_organization.json, the ones defined below will take precedence.
  <location>
    latitude     41.896
    longitude    -87.643
  </location>
</organization>

# There can be one or more test_spec blocks. Each test_spec block represents a
# test specification, i.e. a test type, along with the parameters for the test.
# The test_spec's *must* have an 'id' field which gets used later to identify
# them.
<test_spec bwctl_4h_tcp_test>
  # Define a test spec for testing achievable bandwidth once every 4 hours

  type              perfsonarbuoy/bwctl  # Perform a bwctl test (i.e. achievable bandwidth)
  tool              bwctl/iperf          # Use 'iperf' to do the bandwidh test
  protocol          tcp                  # Run a TCP bandwidth test
  interval          14400                # Run the test every 4 hours
  duration          20                   # Perform a 20 second test
</test_spec>

<test_spec bwctl_24h_udp_test>
  # Define a test spec for testing UDP bandwidth once every 24 hours

  type              perfsonarbuoy/bwctl
  tool              bwctl/iperf
  protocol          udp                  # Run a UDP bandwidth test
  interval          86400                # Run the test every 24 hours
  duration          10                   # Perform a 10 second test
  udp_bandwidth     50000000             # Perform a 50Mbps test
</test_spec>

<test_spec owamp_test>
  # Define a test spec for doing jitter, loss and latency testing

  type              perfsonarbuoy/owamp  # Perform a constant low-bandwidth OWAMP test
  packet_interval   0.01                 # Send 100 packets every second (i.e. pause 0.01 seconds between each packet)
  loss_threshold    10                   # Wait no more than 10 seconds for a response
  session_count     18000                # Refresh the test every half hour (once every 18000 packets)
  sample_count      300                  # Send results back every 30 seconds (once every 300 packets)
  packet_padding    0                    # The size of the packets (not including the IP/UDP headers)
  bucket_width      0.001                # The granularity of the measurements
</test_spec>

<test_spec ping_test>
  # Define a test spec for doing ICMP jitter, loss and latency testing every 5 minutes

  type              pinger               # Perform PingER tests
  test_interval     300                  # Perform a test every 5 minutes
  packet_count      10                   # Send 10 packets for each test
  packet_interval   1                    # Pause 1 second between each packet sent
  packet_size       1000                 # The size of the packets (not include the IP headers)
</test_spec>

<test_spec traceroute_test>
  # Define a test spec for running traceroute tests every 10 minutes

  type              traceroute           # Perform a traceroute test
  test_interval     600                  # Run the test every 5 minutes
  protocol          udp                  # Run a UDP traceroute (could also be 'icmp')
  timeout           30                   # Wait 30 seconds 
  pause             0                    # Number of seconds to pause between each traceroute probe
  waittime          5                    # Number of seconds to wait for a response before assuming its lost
  first_ttl         0                    # The initial value for the TTL
  max_ttl           64                   # The maximum value for the TTL
  packet_size       40                   # The size of the packets (not include IP/UDP headers)
</test_spec>



# There can be one or more 'group' blocks. These contain a list of hosts that
# will be used in a test. 
<group dice_latency_hosts>
  # A group type 'mesh' means that all hosts in the list will test to all other
  # hosts in the list. The other available options is 'star' configuration
  # detailed below.
  type              mesh

  # The members contain a list of addresses that will be used in the tests.
  # These *must* correspond to addresses in host blocks above.
  member           perfsonar.newy.example.internet2.edu
  member           perfsonar.salt.example.internet2.edu
  member           newy-owamp.example.es.net
  member           chic-owamp.example.es.net
</group>

<group dice_bandwidth_hosts>
  type              mesh
  member            perfsonar.newy.example.internet2.edu
  member            perfsonar.salt.example.internet2.edu
  member            newy-pt1.example.es.net
  member            chic-pt1.example.es.net
</group>

<group dice_latency_star>
  # A group type 'star' means that the center_address host tests with all other
  # hosts in the list.
  type              star

  center_address   perfsonar.newy.example.internet2.edu

  # The members contain a list of addresses that will be used in the tests.
  # These *must* correspond to addresses in host blocks above.
  member           newy-owamp.example.es.net
  member           chic-owamp.example.es.net
</group>



# There can be one or more 'test' blocks that represent tests that the mesh
# should be performing. These combine the group elements defined above with
# test parameters defined above.
<test>
  description       Traceroute Test Between DICE Latency Hosts
  group             dice_latency_hosts
  test_spec         traceroute_test

  # For members who are not running the required mesh configuration agent, a
  # list of 'no_agent' elements can be specified.
  # no_agent         chic-owamp.example.es.net
  # no_agent         newy-owamp.example.es.net
</test>

<test>
  description       TCP BWCTL Test Between DICE Bandwidth Hosts
  group             dice_bandwidth_hosts
  test_spec         bwctl_4h_tcp_test
</test>

<test>
  description       UDP BWCTL Test Between DICE Bandwidth Hosts
  group             dice_bandwidth_hosts
  test_spec         bwctl_24h_udp_test
</test>

<test>
  description       OWAMP Test Between DICE Latency Hosts
  group             dice_latency_hosts
  test_spec         owamp_test
</test>

<test>
  description       Ping Test Between DICE Latency Hosts
  group             dice_latency_hosts
  test_spec         ping_test
</test>

<test>
  description       Traceroute Test Between DICE Bandwidth Hosts
  group             dice_bandwidth_hosts
  test_spec         traceroute_test
</test>
