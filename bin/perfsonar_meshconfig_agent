#!/usr/bin/perl

use strict;
use warnings;

=head1 NAME

perfsonar_meshconfig_agent.pl - Cooridnates various test definitions and manages them in
pScheduler

=head1 DESCRIPTION

This daemon does the following:
    * Reads test definitions from a local file on disk
    * Reads remote test definitions and combines them with any remote definitions
    * Manages creation, deletion and maintenance all test definitions in pScheduler
=cut

use FindBin qw($Bin);
use lib "$Bin/../lib";

use Data::Validate::IP qw(is_ipv4);
use Data::Validate::Domain qw(is_hostname);
use Getopt::Long;
use Config::General;
use Linux::Inotify2;
use Log::Log4perl qw/:easy/;

use perfSONAR_PS::MeshConfig::Agent;
use perfSONAR_PS::RegularTesting::Config;
use perfSONAR_PS::RegularTesting::Utils::ConfigFile qw(parse_file);
use perfSONAR_PS::Client::PScheduler::TaskManager;
use perfSONAR_PS::Client::PScheduler::Task;
use perfSONAR_PS::Utils::Daemon qw/daemonize setids lockPIDFile unlockPIDFile/;
use perfSONAR_PS::Utils::Host qw(get_interface_addresses_by_type);

# set the process name
$0 = "perfsonar_meshconfig_agent.pl";

my $CONFIG_FILE;
my $LOGOUTPUT;
my $LOGGER_CONF;
my $PIDFILE;
my $DEBUGFLAG;
my $HELP;
my $RUNAS_USER;
my $RUNAS_GROUP;
my $DEFAULT_TASKS_FILE = '/etc/perfsonar/meshconfig-agent-tasks.conf';

my ( $status, $res );

$status = GetOptions(
    'config=s'  => \$CONFIG_FILE,
    'output=s'  => \$LOGOUTPUT,
    'logger=s'  => \$LOGGER_CONF,
    'pidfile=s' => \$PIDFILE,
    'verbose'   => \$DEBUGFLAG,
    'user=s'    => \$RUNAS_USER,
    'group=s'   => \$RUNAS_GROUP,
    'help'      => \$HELP
);

if ( not $CONFIG_FILE ) {
    print "Error: no configuration file specified\n";
    exit( -1 );
}

my %conf = Config::General->new( $CONFIG_FILE )->getall();

if ( not $PIDFILE ) {
    $PIDFILE = $conf{"pid_file"};
}

if ( not $PIDFILE ) {
    $PIDFILE = "/var/run/perfsonar-meshconfig-agent.pid";
}

( $status, $res ) = lockPIDFile( $PIDFILE );
if ( $status != 0 ) {
    print "Error: $res\n";
    exit( -1 );
}

my $fileHandle = $res;

# Check if the daemon should run as a specific user/group and then switch to
# that user/group.
if ( not $RUNAS_GROUP ) {
    if ( $conf{"group"} ) {
        $RUNAS_GROUP = $conf{"group"};
    }
}

if ( not $RUNAS_USER ) {
    if ( $conf{"user"} ) {
        $RUNAS_USER = $conf{"user"};
    }
}

if ( $RUNAS_USER and $RUNAS_GROUP ) {
    if ( setids( USER => $RUNAS_USER, GROUP => $RUNAS_GROUP ) != 0 ) {
        print "Error: Couldn't drop privileges\n";
        exit( -1 );
    }
}
elsif ( $RUNAS_USER or $RUNAS_GROUP ) {

    # they need to specify both the user and group
    print "Error: You need to specify both the user and group if you specify either\n";
    exit( -1 );
}

# Now that we've dropped privileges, create the logger. If we do it in reverse
# order, the daemon won't be able to write to the logger.
my $logger;
if ( not defined $LOGGER_CONF or $LOGGER_CONF eq q{} ) {
    use Log::Log4perl qw(:easy);

    my $output_level = $INFO;
    if ( $DEBUGFLAG ) {
        $output_level = $DEBUG;
    }

    my %logger_opts = (
        level  => $output_level,
        layout => '%d (%P) %p> %F{1}:%L %M - %m%n',
    );

    if ( defined $LOGOUTPUT and $LOGOUTPUT ne q{} ) {
        $logger_opts{file} = $LOGOUTPUT;
    }

    Log::Log4perl->easy_init( \%logger_opts );
    $logger = get_logger( "perfSONAR_PS" );
}
else {
    Log::Log4perl->init( $LOGGER_CONF );
    $logger = get_logger( "perfSONAR_PS" );
}

# Before daemonizing, set die and warn handlers so that any Perl errors or
# warnings make it into the logs.
my $insig = 0;
$SIG{__WARN__} = sub {
    $logger->warn("Warned: ".join( '', @_ ));
    return;
};

$SIG{__DIE__} = sub {                       ## still dies upon return
    die @_ if $^S;                      ## see perldoc -f die perlfunc
    die @_ if $insig;                   ## protect against reentrance.
    $insig = 1;
    $logger->error("Died: ".join( '', @_ ));
    $insig = 0;
    return;
};

if ( not $DEBUGFLAG ) {
    ( $status, $res ) = daemonize();
    if ( $status != 0 ) {
        $logger->error( "Couldn't daemonize: " . $res );
        exit( -1 );
    }
}

unlockPIDFile( $fileHandle );

##
# Monitor config files for changes
my $tasks_conf_file = $conf{"tasks_conf"};
unless ($tasks_conf_file) {
    $logger->debug( "No tasks file specified. Defaulting to $DEFAULT_TASKS_FILE" );
    $tasks_conf_file = $DEFAULT_TASKS_FILE;
}
my $inotify = new Linux::Inotify2 or die "Unable to create new inotify object: $!" ;
$inotify->blocking(0);
$inotify->watch("$CONFIG_FILE", IN_MODIFY) or die "$CONFIG_FILE watcher creation failed" ;
$inotify->watch($tasks_conf_file, IN_MODIFY) or die "$tasks_conf_file watcher creation failed" ;


##
# Initialize parameters related to pscheduler failures
my $pscheduler_fails = 0;
my $max_pscheduler_attempts = $conf{"pscheduler_fail_attempts"};
unless ($max_pscheduler_attempts) {
    $logger->debug( "No pscheduler fail attempts specified. Defaulting to 5" );
    $max_pscheduler_attempts = 5;
}

##
# Start main program loop
while(1){
    ##
    # Load configuration
    eval{
        %conf = Config::General->new( $CONFIG_FILE )->getall();
    };
    if($@){
        $logger->error("Error reading $CONFIG_FILE, proceeding with defaults. Caused by: $@");
        %conf = ();
    }
    
    unless ($conf{"client_uuid_file"}) {
        my $default = "/var/lib/perfsonar/meshconfig/client_uuid";
        $logger->debug( "No client UUID file specified. Defaulting to $default" );
        $conf{"client_uuid_file"} = $default;
    }
    
    unless ($conf{"pscheduler_url"}) {
        my $default = "https://127.0.0.1/pscheduler";
        $logger->debug( "No pScheduler URL specified. Defaulting to $default" );
        $conf{"pscheduler_url"} = $default;
    }
    
    unless ($conf{"pscheduler_tracker_file"}) {
        my $default = "/var/lib/perfsonar/meshconfig/psc_tracker";
        $logger->debug( "No pScheduler tracker file specified. Defaulting to $default" );
        $conf{"pscheduler_tracker_file"} = $default;
    }
    
    unless ($conf{"check_interval"}) {
        $logger->debug( "No service check interval specified. Defaulting to 60 minutes" );
        $conf{"check_interval"} = 3600;
    }
    
    unless ($conf{"check_config_interval"}) {
        $logger->debug( "No configuration file check interval specified. Defaulting to 60 seconds" );
        $conf{"check_config_interval"} = 60;
    }
    
    unless ($conf{"task_min_ttl"}) {
        $logger->debug( "No task minimum TTL specified. Defaulting to 24 hours." );
        $conf{"task_min_ttl"} = 86400;
    }
    
    unless ($conf{"task_min_runs"}) {
        $logger->debug( "No task minimum runs specified. Defaulting to 2" );
        $conf{"task_min_runs"} = 2;
    }
    
    unless ($conf{"task_renewal_fudge_factor"}) {
        $logger->debug( "No task renewal fudge factor specified. Defaulting to .25" );
        $conf{"task_renewal_fudge_factor"} = .25; # 15 minutes by default
    }
    
    my $until_next_file_check = $conf{"check_config_interval"};
    
    my $addresses;
    if ($conf{address}) {
        if (ref($conf{address}) eq "ARRAY") {
            $addresses = $conf{address};
        }                     
        else {
            $addresses = [ $conf{address} ];
        }
    }                         

    my $admin_emails;
    if ($conf{admin_email}) {
        unless (ref($conf{admin_email}) eq "ARRAY") {
            $conf{admin_email} = [ $conf{admin_email} ];
        }
    }

    if ($conf{mesh}) {
        unless (ref($conf{mesh}) eq "ARRAY") {
            $conf{mesh} = [ $conf{mesh} ];
        }
    }
    
    ##
    # Check remote test definitions
    my $start = time;
    eval{
        my $agent = perfSONAR_PS::MeshConfig::Agent->new();
        $agent->init({
                     meshes => $conf{mesh},
                     tasks_conf => $tasks_conf_file,
                     validate_certificate => $conf{validate_certificate},
                     ca_certificate_file => $conf{ca_certificate_file},
                     ca_certificate_path => $conf{ca_certificate_path},
                     configure_archives   => $conf{configure_archives},  
                     skip_redundant_tests => $conf{skip_redundant_tests},
                     addresses => $addresses,
                     requesting_agent_config => $conf{local_host},
                     from_address => $conf{from_address},
                     administrator_emails => $conf{administrator_emails},
                     send_error_emails    => $conf{send_error_emails},
        });
        $agent->run();
        $inotify->poll(); #clear out any events caused by changes from above
    };
    if($@){
        $logger->error("Problem reading remote meshes: $@");
    }
    
    ##
    # Load tasks_conf and interact with pScheduler
    
    #parse into hash
    my $parsed_config;
    my ($status, $res);
    eval{
        ($status, $res) = parse_file(file => $tasks_conf_file);
    };
    if($@){
        #probably shouldn't happen, but just in case
        $logger->error("Error reading tasks configuration file: $@");
    }elsif ($status != 0) {
        #errors should be here
        $logger->error("Problem reading tasks configuration file: $res");
    }else{    
        #able to read file, parse into objects
        eval {
            $parsed_config = perfSONAR_PS::RegularTesting::Config->parse($res, 1);
        };
        if ($@) {
            $logger->error("Problem parsing tasks configuration file: $@");
        }
    }
    
    
    #initialize our timing variables
    my $end = time;
    my $until_next_refresh = $conf{"check_interval"} - ($end - $start);
    $start = $end;
    #if we were able to read the file, do stuff with it
    if($parsed_config){
        #get global measurement archives
        my %ma_map = ();
        foreach my $ma(@{ $parsed_config->measurement_archives }){
            $ma_map{$ma->type()} = [] unless($ma_map{$ma->type()});
            eval {
                push @{$ma_map{$ma->type()}}, $ma;
            };
            if($@){
                $logger->error("Problem parsing measurement archive: $@");
            }
        }
    
        #build tests
        my $old_task_deadline = $end + $until_next_refresh;
        my $task_manager;        
        eval{
            $task_manager = new perfSONAR_PS::Client::PScheduler::TaskManager();
            $task_manager->init(
                                pscheduler_url => $conf{pscheduler_url},
                                tracker_file => $conf{pscheduler_tracker_file},
                                client_uuid_file => $conf{client_uuid_file},
                                user_agent => "perfsonar-meshconfig",
                                new_task_min_ttl => $conf{"task_min_ttl"},
                                new_task_min_runs => $conf{"task_min_runs"},
                                old_task_deadline => $old_task_deadline,
                                task_renewal_fudge_factor => $conf{"task_renewal_fudge_factor"},
                                debug => $DEBUGFLAG
                            );
        };
        if($@){
            $logger->error("Problem initializing task_manager: $@");
        }elsif(!$task_manager->check_assist_server()){
            $logger->error("Problem contacting pScheduler, will try again later.");
            $pscheduler_fails++;
        }else{
            $logger->info("pScheduler is back up, resuming normal operation") if($pscheduler_fails);
            $pscheduler_fails = 0;
            foreach my $test (@{ $parsed_config->tests }) {
                next if $test->disabled;
                eval{
                    $test->parameters()->to_pscheduler( url => $conf{pscheduler_url}, test => $test, task_manager => $task_manager, archive_map => \%ma_map);
                };
                if($@){
                    $logger->error("Error building pScheduler task: " . $@);
                }
            }
    
            #commit tasks
            $task_manager->commit();
            
            #Log results
            foreach my $error(@{$task_manager->errors()}){
               $logger->warn($error);
            }
            foreach my $deleted_task(@{$task_manager->deleted_tasks()}){
               $logger->debug("Deleted task " . $deleted_task->uuid . " on server " . $deleted_task->url);
            }
            foreach my $added_task(@{$task_manager->added_tasks()}){
               $logger->debug("Created task " . $added_task->uuid . " on server " . $added_task->url);
            }
            if(@{$task_manager->added_tasks()} || @{$task_manager->deleted_tasks()}){
                $logger->info("Added " . @{$task_manager->added_tasks()} . " new tasks, and deleted " . @{$task_manager->deleted_tasks()} . " old tasks");
            }
        }
    }

    ##
    # Sleep until its time to look for file updates or time to refesh
    $end = time;
    $until_next_refresh = $until_next_refresh - ($end - $start);
    $logger->debug("Time until next record refresh is $until_next_refresh seconds");
    $start = $end;
    while($until_next_refresh > 0){
        sleep($until_next_refresh < $until_next_file_check ? $until_next_refresh : $until_next_file_check);
        if($inotify->poll()){
            $logger->info("Configuration file change detected, refreshing records.");
            last;
        }elsif($pscheduler_fails > 0 && $pscheduler_fails < $max_pscheduler_attempts){
            $logger->info("Retrying pscheduler after failure");
            last;
        }else{
            $end = time;
            $until_next_refresh -= ($end - $start);
            $start = $end;
        }
    }
}

exit(0);
